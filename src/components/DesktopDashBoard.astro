---
const {config, bundles} = Astro.props;
const inlineScript = `<script>window.config=${JSON.stringify(config, null, 2)};</script>`;
const inlineScript2 = `<script>window.productBank=${JSON.stringify(bundles.categories, null, 2)};</script>`;
import Loader from "./loader.astro";
---

<Loader />
<style>
  /* body {
    display: flex;
  } */
  #ToolHolder {
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
  }
  #dashboard-container {
    /* background-color: green; */
    border: 2px solid rgb(255, 255, 255);
    border-radius: 1em;
    width: 95vw;
    box-shadow:
      0 0 10px #00000023,
      0 0 20px #00000065,
      0 0 30px #0000000c;
  }
  #dashboard-center {
    border-radius: 1em;
    margin: 0.5em;
  }
  h1 {
    line-height: 1em;
    margin-bottom: 1em;
  }
</style>
<div set:html={inlineScript} />
<div set:html={inlineScript2} />
<div id="dashboard-container">
  <div id="dashboard-left">
    <div id="subscribedTools" class="box-it"></div>
    <div id="promotedTools" class="box-it">
      <h1>More Tools You can try!</h1>
    </div>
  </div>
  <div id="dashboard-center">
    <main>
      <div id="tool-title"></div>
      <div class="main-container">
        <div id="app" class="form-container"></div>
        <div id="output-container-id" class="output-container">
          <textarea
            id="output"
            readonly
            placeholder="Your generated prompt will appear here..."></textarea>
        </div>
      </div>
    </main>
  </div>
</div>

<script>
  import {
    generate,
    loadDashBoard,
    getPathByProductID,
  } from "../coreglobal/dashboard.js";

  import {AuthManagement} from "../coreglobal/supabase";
  window.authManager = new AuthManagement();
  await window.authManager.globalGetSession();

  await loadDashBoard(window.productBank);
  if (!localStorage.getItem("currentToolUsed")) {
    const toolToBeLoadedA = await getPathByProductID(window.productBank, "2");
    document.getElementById("tool-title").innerText = toolToBeLoadedA[1];
    await generate(toolToBeLoadedA[0]);
    setTimeout(() => {
      document.getElementById("loader").style.display = "none";
    }, 500);
  } else {
    localStorage.getItem("currentToolUsed");
    const toolToBeLoaded = await getPathByProductID(
      window.productBank,
      localStorage.getItem("currentToolUsed")
    );
    document.getElementById("tool-title").innerText = toolToBeLoaded[1];
    await generate(toolToBeLoaded[0]);
    setTimeout(() => {
      document.getElementById("loader").style.display = "none";
    }, 500);
  }

  async function collapseClickMenu() {
    // Add event listeners for category and subcategory sections
    const categories = document.querySelectorAll(".category-section");

    categories.forEach((category) => {
      category.addEventListener("click", function (event) {
        event.stopPropagation(); // Prevent bubbling up

        const clickedElement = event.target;

        // Handle category clicks
        if (
          clickedElement.parentElement.classList.contains("category-section")
        ) {
          toggleCollapse(category, ".subcategory-section");
        }

        // Handle subcategory clicks
        else if (
          clickedElement.parentElement.classList.contains("subcategory-section")
        ) {
          toggleCollapse(clickedElement.parentElement, ".tool-item");
        }
      });
    });

    // Function to toggle collapse/expand for child elements
    function toggleCollapse(parentElement, childSelector) {
      const children = parentElement.querySelectorAll(childSelector);

      if (children.length === 0) return;

      // Determine whether to collapse or expand based on current state
      const isCollapsed = [...children].every(
        (child) => child.style.display === "none"
      );

      children.forEach((child) => {
        child.style.display = isCollapsed ? "block" : "none";
      });
    }
  }

  await collapseClickMenu();

  setTimeout(() => {
    document.getElementById("loader").style.display = "none";
  }, 500);
</script>
<script>
  window.simplemde = new SimpleMDE({
    element: document.getElementById("output"),
  });
</script>

<script></script>
