---
import MobileDashboard from "../../components/MobileDashBoard.astro";
import {configs} from "../../coreglobal/products.js";
// import "../../styles/global.css";

const genCodes = configs.map((obj) => obj.genCode);
// const seoCodes = configs.map((obj) => ({toolMeta: obj.toolMeta}));

// // console.log(genCodes);

function getAllProducts(configs) {
  const toolLinks = Object.entries(configs).map(([a, b]) => {
    const title = b.toolMeta?.title || "Untitled Tool";
    const description = b.toolMeta?.description || "No description available";
    const genCode = b.genCode;
    return {
      title,
      description,
      genCode: genCode,
      meta: b.toolMeta,
    };
  });
  return toolLinks;
}

const toolLinks = getAllProducts(configs);

const bundles = {categories: []};
toolLinks.forEach((tool) => {
  if (tool.meta) {
    const {bundle, subCat, title, description, productID} = tool.meta;
    let category = bundles.categories.find(
      (category) => category.name === bundle
    );
    if (!category) {
      category = {name: bundle, subcategories: []};
      bundles.categories.push(category);
    }

    let subcategory = category.subcategories.find((sub) => sub.name === subCat);
    if (!subcategory) {
      subcategory = {name: subCat, tools: []};
      category.subcategories.push(subcategory);
    }
    // // console.log(toolLinks);
    subcategory.tools.push({
      name: title,
      description,
      path: tool.genCode,
      productID: productID,
    });
  }
});
// // console.log(JSON.stringify(bundles.categories, null, 2));
const inlineScript = `<script>window.config = ${JSON.stringify(genCodes, null, 2)};</script>`;
const inlineScript2 = `<script>window.productBank = ${JSON.stringify(bundles.categories, null, 2)};</script>`;
// import Header from "../../components/Header.astro";
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
      import {UIManger} from "../../coreglobal/mobile_dashboard.js";

      // console.log(`Current Orientation: ${UIManger.getOrientation()}`);

      if (UIManger.getOrientation() === "Portrait") {
        // window.location.href = "/dashboard/mobile";
      } else {
        window.location.href = "/dashboard/desktop";
      }
    </script>
    <link rel="stylesheet" href="/css/simpleMDE.css" />
    <link rel="stylesheet" href="/css/mobiletool.css" />
    <title>Dashboard</title>
  </head>
  <div set:html={inlineScript} />
  <div set:html={inlineScript2} />
  <!-- <Header /> -->
  <MobileDashboard />

  <script>
    // console.log("1>>", window.config);
    // console.log("2>>", window.productBank);

    import {AuthManagement} from "../../coreglobal/supabase";
    import {
      generate,
      loadDashBoard,
      UIManger,
      getPathByProductID,
    } from "../../coreglobal/mobile_dashboard.js";

    const contentBlock = document.querySelector(".content-block");
    contentBlock.addEventListener(
      "touchstart",
      UIManger.handleTouchStart,
      false
    );
    contentBlock.addEventListener("touchmove", UIManger.handleTouchMove, false);

    document.querySelectorAll(".tab-btn").forEach((tab, index) => {
      tab.addEventListener("click", () => UIManger.handleTabClick(index));
    });

    document.addEventListener("DOMContentLoaded", function () {
      const fullscreenButton = document.getElementById("fullscreen");

      fullscreenButton.addEventListener("click", function () {
        UIManger.enterFullscreen();
      });
    });

    // console.log(`Current Orientation: ${UIManger.getOrientation()}`);

    window.addEventListener("resize", () => {
      // console.log(`New Orientation: ${UIManger.getOrientation()}`);
    });

    window.authManager = new AuthManagement();
    await window.authManager.globalGetSession();
    // alert(window.session);
    if (window.session == "NotLoggedIn") {
      window.location.pathname = "/login";
    }

    await loadDashBoard(window.productBank);
    await generateFirst();
    async function generateFirst() {
      if (!localStorage.getItem("currentToolUsed")) {
        const toolToBeLoadedA = await getPathByProductID(
          window.productBank,
          "2"
        );
        document.getElementById("tool-title").innerText = toolToBeLoadedA[1];
        await generate(toolToBeLoadedA[0]);
        setTimeout(() => {
          document.getElementById("loader").style.display = "none";
        }, 500);
      } else {
        localStorage.getItem("currentToolUsed");
        const toolToBeLoaded = await getPathByProductID(
          window.productBank,
          localStorage.getItem("currentToolUsed")
        );
        // console.log(toolToBeLoaded);
        document.getElementById("tool-title").innerText = toolToBeLoaded[1];
        await generate(toolToBeLoaded[0]);

        async function collapseClickMenu() {
          // Add event listeners for category and subcategory sections
          const categories = document.querySelectorAll(".category-section");

          categories.forEach((category) => {
            category.addEventListener("click", function (event) {
              event.stopPropagation(); // Prevent bubbling up

              const clickedElement = event.target;

              // Handle category clicks
              if (
                clickedElement.parentElement.classList.contains(
                  "category-section"
                )
              ) {
                toggleCollapse(category, ".subcategory-section");
              }

              // Handle subcategory clicks
              else if (
                clickedElement.parentElement.classList.contains(
                  "subcategory-section"
                )
              ) {
                toggleCollapse(clickedElement.parentElement, ".tool-item");
              }
            });
          });

          // Function to toggle collapse/expand for child elements
          function toggleCollapse(parentElement, childSelector) {
            const children = parentElement.querySelectorAll(childSelector);

            if (children.length === 0) return;

            // Determine whether to collapse or expand based on current state
            const isCollapsed = [...children].every(
              (child) => child.style.display === "none"
            );

            children.forEach((child) => {
              child.style.display = isCollapsed ? "block" : "none";
            });
          }
        }

        await collapseClickMenu();

        setTimeout(() => {
          document.getElementById("loader").style.display = "none";
        }, 500);
      }
    }
  </script>
  <script type="module">
    import {marked} from "https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js";

    document.addEventListener("DOMContentLoaded", function () {
      document
        .getElementById("logoutButton2")
        .addEventListener("click", async () => {
          await window.authManager.logoutUser();
          window.location.pathname = "/";
        });
      // // console.log(window.productBank);
      // document.getElementById("tool-title").innerText = config[0];
      document.getElementById("output").addEventListener("input", function () {
        const markdownContent = this.value;
        const htmlContent = marked(markdownContent); // Using marked.js to convert markdown to HTML
        document.getElementById("renderedMarkdown").innerHTML = htmlContent;
        document.getElementById("renderedMarkdown").innerHTML +=
          `<div class="copy" id="copy" onclick="copyText()">Copy</div>`;
      });
    });
  </script>

  <script>
    document.querySelectorAll(".tab-btn-bottom").forEach((button) => {
      button.addEventListener("click", () => {
        const targetId = button.dataset.target;
        document.querySelectorAll(".tab-btn-bottom").forEach((btn) => {
          btn.classList.remove("active");
        });

        // Add active class to the clicked button
        button.classList.add("active");

        // Hide all tab contents
        document.querySelectorAll(".bottom-tab-content").forEach((tab) => {
          tab.style.display = "none";
        });

        // Show the selected tab and expand the container
        document.getElementById(targetId).style.display = "flex";
        document.getElementById("bottom-button-pages").style.height = "100vh";
      });
    });

    document.querySelectorAll(".close-btn").forEach((closeBtn) => {
      closeBtn.addEventListener("click", (event) => {
        // Hide the parent content div
        event.target.parentElement.style.display = "none";

        // Collapse the entire container
        document.getElementById("bottom-button-pages").style.height = "0";
        document.querySelectorAll(".tab-btn-bottom").forEach((btn) => {
          btn.classList.remove("active");
        });
      });
    });

    // Show the first tab by default
    // document.getElementById("bottom-button-pages").style.height = "100vh";
    // document.getElementById("subscribedTools").style.display = "flex";
    // document.getElementById("loader").style.display = "none";
  </script>
  <script>
    [
      "fullscreenchange",
      "webkitfullscreenchange",
      "mozfullscreenchange",
      "MSFullscreenChange",
    ].forEach((eventType) => {
      document.addEventListener(eventType, () => {
        if (
          !document.fullscreenElement &&
          !document.webkitFullscreenElement &&
          !document.mozFullScreenElement &&
          !document.msFullscreenElement
        ) {
          // console.log("Exited full screen");
          document.body.style.height = "92vh";
        } else {
          // console.log("Entered full screen");
          document.body.style.height = "100vh";
        }
      });
    });
  </script>
  <script>
    class Dot {
      constructor() {
        this.element = document.createElement("div");
        this.element.classList.add("dot");

        // Randomize properties
        this.size = Math.random() * 150 + 20; // 80px to 200px
        this.speed = Math.random() * 0.5 + 0.2; // 0.2 to 0.7 speed
        this.angle = Math.random() * Math.PI * 2; // Random starting angle
        this.xRange = Math.random() * 100 + 150; // Horizontal movement range
        this.yRange = Math.random() * 100 + 150; // Vertical movement range

        this.element.style.width = `${this.size}px`;
        this.element.style.height = `${this.size}px`;
        this.element.style.backgroundColor = `rgba(${Math.random() * 255}, ${
          Math.random() * 255
        }, ${Math.random() * 255}, ${Math.random() * 0.4 + 0.15})`;

        // Set initial position
        this.x = (Math.random() * window.outerWidth) / 2;
        this.y = (Math.random() * window.outerHeight) / 2;
        this.element.style.left = `${this.x}px`;
        this.element.style.top = `${this.y}px`;
        // // console.log("outer", window.outerWidth);
        // // console.log("inner", window.innerWidth);
        // document.getElementById("tab-container")?.appendChild(this.element);
        document.body.appendChild(this.element);
      }

      updatePosition() {
        this.x += Math.cos(this.angle) * this.speed;
        this.y += Math.sin(this.angle) * this.speed;
        this.angle += 0.001; // Slow change for smooth movement

        // Bounce back at edges
        if (this.x < 0 || this.x > window.outerWidth - this.size)
          this.angle = Math.PI - this.angle;
        if (this.y < 0 || this.y > window.outerHeight - this.size)
          this.angle = -this.angle;

        this.element.style.transform = `translate(${this.x}px, ${this.y}px)`;
      }
    }

    class DotAnimation {
      constructor(numDots) {
        this.dots = [];
        for (let i = 0; i < numDots; i++) {
          this.dots.push(new Dot());
        }
        this.animate();
        // window.addEventListener("resize", this.handleResize.bind(this));
      }

      animate() {
        this.dots.forEach((dot) => dot.updatePosition());
        requestAnimationFrame(this.animate.bind(this));
      }

      handleResize() {
        this.dots.forEach((dot) => {
          dot.x = Math.random() * window.outerWidth;
          dot.y = Math.random() * window.outerHeight;
        });
      }
    }

    // Initialize animation
    // new DotAnimation(12);
  </script>


</html>
